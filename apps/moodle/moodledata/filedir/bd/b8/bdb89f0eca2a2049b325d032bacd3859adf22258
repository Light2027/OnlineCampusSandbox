//-----------------------------------------------------------------------
// <copyright file="PenDownCommand.cs" company="FHWN">
//     Copyright (c) Sprocket Enterprises. All rights reserved.
// </copyright>
// <author>Galfi Istvan Balazs</author>
// <summary>This class contains the methods and variables of the PenDown Turtle Command.</summary>
//-----------------------------------------------------------------------

namespace Aufgabe4_Istvan_Galfi.TurtleCommmands
{
    using System;
    using Aufgabe4_Istvan_Galfi.Interfaces;

    /// <summary>
    /// This class contains the methods and variables of the PenDown Turtle Command.
    /// </summary>
    /// <seealso cref="Aufgabe4_Istvan_Galfi.ITurtleCommand" />
    public class PenDownCommand : ITurtleCommand
    {
        /// <summary>
        /// The turtle.
        /// </summary>
        private Turtle turtle;

        /// <summary>
        /// Gets or sets the turtle, this command belongs to.
        /// </summary>
        /// <value>
        /// The turtle.
        /// </value>
        /// <exception cref="ArgumentNullException">The Turtle cant be null.</exception>
        public Turtle Turtle
        {
            get
            {
                return this.turtle;
            }

            set
            {
                if (value == null)
                {
                    throw new ArgumentNullException("The Turtle cant be null.");
                }

                this.turtle = value;
            }
        }

        /// <summary>
        /// Draws the specified renderer.
        /// </summary>
        /// <param name="renderer">The renderer.</param>
        public void Draw(IRenderer renderer)
        {
            renderer.Draw(this);
        }

        /// <summary>
        /// Executes this Command.
        /// </summary>
        /// <param name="interpreter">The interpreter.</param>
        public void Execute(Interpreter interpreter)
        {
            interpreter.Interpret(this);
        }

        /// <summary>
        /// Converts to string.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String" /> that represents this instance.
        /// </returns>
        public override string ToString()
        {
            return "PenDown";
        }
    }
}